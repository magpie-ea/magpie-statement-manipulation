count(response, best_arg_deviance, best_info_deviance) %>%
mutate(
proportion = n / sum(n)
) %>%
summarise(
proportion_best_arg = ifelse(
0 %in% best_arg_deviance,
proportion[which(best_arg_deviance == 0)],
0
),
proportion_best_info = ifelse(
0 %in% best_info_deviance,
proportion[which(best_info_deviance == 0)],
0
),
modal_arg  = str_c(response[which(min(best_arg_deviance) == best_arg_deviance)], collapse = "::")[1],
modal_info = str_c(response[which(min(best_info_deviance) == best_info_deviance)], collapse = "::")[1],
modal_resp = response[which(max(proportion) == proportion)],
modal_resp_best_arg  = response[which(proportion == max(proportion))] %in%
response[which(min(best_arg_deviance) == best_arg_deviance)],
modal_resp_best_info = response[which(proportion == max(proportion))] %in%
response[which(min(best_info_deviance) == best_info_deviance)]
)
proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col(color = "black") +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "lightgray") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "lightgray") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(3, "lines")
) +
scale_fill_manual(values = c("#762A83", "#1B7837")) +
scale_y_reverse()
proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col(color = "black") +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "lightgray") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "lightgray") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(3, "lines")
) +
scale_fill_manual(values = c("#762A83", "#1B7837")) #+
p1 <- proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col(color = "black") +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "lightgray") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "lightgray") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(3, "lines")
) +
scale_fill_manual(values = c("#762A83", "#1B7837")) #+
p2 <- proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col(color = "black") +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "lightgray") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "lightgray") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(3, "lines")
) +
scale_fill_manual(values = c("#762A83", "#1B7837")) +
scale_y_reverse()
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
panels <- c('panel-1-1', 'panel-1-2', 'panel-2-1', 'panel-2-2', 'panel-1-3', 'panel-2-3', 'panel-1-4')
for (p in panels){
g1$grobs[grep(p, g1$layout$name)] <- g2$grobs[grep(p, g2$layout$name)]
}
grid.newpage()
grid.draw(g1)
libary(grid)
library(grid)
grid.newpage()
grid.draw(g1)
ggsave("produc-choice.png")
ggsave("produc-choice.png", g1)
proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col() +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "black") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "black") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(3, "lines")
) +
scale_fill_manual(values = c("#762A83", "#1B7837")) +
scale_y_reverse()
p2 <- proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col() +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "black") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "black") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(3, "lines")
) +
scale_fill_manual(values = c("#762A83", "#1B7837")) +
scale_y_reverse()
p1 <- proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col() +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "black") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "black") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(3, "lines")
) +
scale_fill_manual(values = c("#762A83", "#1B7837")) #+
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
panels <- c('panel-1-1', 'panel-1-2', 'panel-2-1', 'panel-2-2', 'panel-1-3', 'panel-2-3', 'panel-1-4')
for (p in panels){
g1$grobs[grep(p, g1$layout$name)] <- g2$grobs[grep(p, g2$layout$name)]
}
grid.newpage()
grid.draw(g1)
grid.draw(g1)
ggsave("produc-choice.png", g1)
proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col() +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "black") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "black") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(4, "lines")
) +
scale_fill_manual(values = c("#c994c7", "#dd1c77")) #+
proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col() +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "black") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "black") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(4, "lines")
) +
scale_fill_manual(values = c("#a6cee3", "#1f78b4")) #+
p1 <- proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col() +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "black") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "black") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(4, "lines")
) +
scale_fill_manual(values = c("#a6cee3", "#1f78b4")) #+
p2 <- proportions_by_situation %>%
pivot_longer(c("proportion_best_arg", "proportion_best_info")) %>%
filter(situation_number %in% c(1, 5, 7, 10, 15, 17, 20)) %>%
ggplot(aes(x = name, y = value, fill = name)) +
geom_col() +
coord_flip() +
# checks and marks
# custom axis
geom_segment(aes(x = 0, xend = 3, y = 0, yend = 0 ), color = "black") +
# geom_text(aes(x = 1.5, y = -0.025, label = "0"), size = 3, color = "lightgray") +
geom_segment(aes(x = 0, xend = 3, y = 1, yend = 1 ), color = "black") +
# geom_text(
#   data = filter(proportions_by_situation, modal_resp_best_arg == T),
#   aes(x = 1, y = 1.025, label = "X"),
#   size = 3,
#   color = "darkred"
# ) +
# facets & style
facet_grid(situation_number ~ condition) +
theme_void() +
# theme_ida(y.axis = F) +
theme(
axis.ticks = element_blank(),
axis.text =  element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
legend.position = "none",
panel.spacing.x = unit(4, "lines")
) +
scale_fill_manual(values = c("#a6cee3", "#1f78b4")) +
scale_y_reverse()
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
panels <- c('panel-1-1', 'panel-1-2', 'panel-2-1', 'panel-2-2', 'panel-1-3', 'panel-2-3', 'panel-1-4')
for (p in panels){
g1$grobs[grep(p, g1$layout$name)] <- g2$grobs[grep(p, g2$layout$name)]
}
grid.newpage()
grid.draw(g1)
grid.draw(g1)
ggsave("produc-choice.png", g1)
library(greta)
source('01_helpers.r')
y_high <- as_data(y_counts_high)
# y_high_i <- as_data(t(y_counts_high[1,]))
y_low  <- as_data(y_counts_low)
theta_neg <- -3
theta_info_arg_weight <- uniform(0,1)
theta_alpha <- uniform(0,5)
## predictions
#### (build matrix representations for utility ingredients (sit x sent))
truth_matrix_greta <- (1 - truth_table_matrix) * -60
# cost
boolean_negation_matrix <-  # entry 1 for all sentences containing "none"
matrix(rep(str_detect(sentences, "none") %>% as.numeric, times = 20), nrow = 20, byrow = T)
cost_matrix_greta <- theta_neg * boolean_negation_matrix
# informativity
info_matrix_greta <-
matrix(rep(informativity_vector, each = 20), nrow = 20)
# argumentative strength
argstr_matrix_greta_high <-
matrix(rep(arg_strength_vector, times = 20), nrow = 20, byrow = T)
argstr_matrix_greta_low <-
matrix(rep(-arg_strength_vector, times = 20), nrow = 20, byrow = T)
# utility
util_high <- truth_matrix_greta +
cost_matrix_greta +
theta_info_arg_weight * info_matrix_greta +
(1 - theta_info_arg_weight) * argstr_matrix_greta_high
util_low <- truth_matrix_greta +
cost_matrix_greta +
theta_info_arg_weight * info_matrix_greta +
(1 - theta_info_arg_weight) * argstr_matrix_greta_low
# prediction
logits_high <- exp(theta_alpha * util_high)
logits_low  <- exp(theta_alpha * util_low)
logit_sums_high <- greta::apply(logits_high, MARGIN = 1, FUN = "sum")
logit_sums_low  <- greta::apply(logits_low,  MARGIN = 1, FUN = "sum")
pred_high <- sweep(logits_high, 1, logit_sums_high, FUN = "/")
pred_low  <- sweep(logits_low, 1,  logit_sums_low,  FUN = "/")
## likelihood
distribution(y_high) <- multinomial(size = rowSums(y_counts_high), prob = pred_high)
distribution(y_low)  <- multinomial(size = rowSums(y_counts_low),  prob = pred_low)
m <- model(
pred_high,
pred_low,
theta_info_arg_weight,
theta_alpha
)
View(m)
show(fit_MAP)
readRDS("fit_MAP.RDS")
fit_MAP <- readRDS("fit_MAP.RDS")
show(fit_MAP)
show(fit_MAP)
obs_tibble <- as_tibble(
rbind(prop.table(y_counts_high,1),
prop.table(y_counts_low,1)
)
) %>%
mutate(
situation = rep(1:20,2),
condition = rep(c("high", "low"), each = 20)
) %>%
pivot_longer(
cols = - c("situation", "condition"),
names_to = "sentence",
values_to = "observed"
) %>%
mutate(
predicted = rbind(fit_MAP$par$pred_high, fit_MAP$par$pred_low)  %>%
as_tibble() %>%
pivot_longer(everything()) %>%
pull(value) %>%
as.vector(),
truth = rbind(truth_table_matrix, truth_table_matrix) %>%
as_tibble() %>%
pivot_longer(everything()) %>%
pull(value) %>%
as.vector(),
arg_str = arg_strength_vector[sentence],
informativity = informativity_vector[sentence],
pred_error = predicted - observed
) %>%
arrange(condition, situation, -abs(pred_error))
with(obs_tibble,
cor.test(predicted, observed)
) %>% show()
message(
"Correlation overall: ",
with(obs_tibble, cor.test(predicted, observed))$estimate %>% signif(3)
)
message(
"Correlation 'high': ",
with(obs_tibble %>% filter(condition == "high"), cor.test(predicted, observed))$estimate %>% signif(3)
)
message(
"Correlation 'low': ",
with(obs_tibble %>% filter(condition == "low"), cor.test(predicted, observed))$estimate %>% signif(3)
)
obs_pred_plot <- obs_tibble %>%
ggplot(aes( x = predicted, y = observed, color = condition)) +
geom_smooth(method = "lm") +
geom_point( alpha = 0.5)
samples <- greta::mcmc(m, n_samples = 4000, thin = 2)
m <- model(
pred_high,
pred_low,
theta_info_arg_weight,
theta_alpha
)
pred_high <- sweep(logits_high, 1, logit_sums_high, FUN = "/")
pred_low  <- sweep(logits_low, 1,  logit_sums_low,  FUN = "/")
distribution(y_high) <- multinomial(size = rowSums(y_counts_high), prob = pred_high)
distribution(y_low)  <- multinomial(size = rowSums(y_counts_low),  prob = pred_low)
m <- model(
pred_high,
pred_low,
theta_info_arg_weight,
theta_alpha
)
